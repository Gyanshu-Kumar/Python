import axios, { AxiosInstance } from 'axios';
import { AINewsError, InvalidApiKeyError, RateLimitExceededError } from './error';
import { HeaderDto, FindNewsDto } from './dto';
import { SERVER_URL, TIMEOUT } from './config';

export class AINews {
  apiKey: string;

  constructor(obj: HeaderDto) {
    this.apiKey = obj.apiKey;
  }

  async getNews(findNewsDto: FindNewsDto): Promise<any> {
    let obj: any = findNewsDto;
    Object.keys(findNewsDto).forEach((key) => {
      const typedKey = key as keyof FindNewsDto;
      if (findNewsDto[typedKey] === undefined) {
        delete obj[typedKey];
      }
    });
    const instance: AxiosInstance = axios.create({
      baseURL: SERVER_URL,
      timeout: TIMEOUT,
      headers: { 'Authorization': `Bearer ${this.apiKey}` },
      params: obj
    });
    try {
      const resp = await instance.get(`/news`);
      return resp.data;
    } catch (error: any) {
      if (axios.isAxiosError(error)) {
        switch (error.response?.status) {
          case 403:
            throw new InvalidApiKeyError();
          case 429:
            throw new RateLimitExceededError();
        }
      }
      throw new AINewsError(error.response?.data?.message);
    }
  }
}

export const Errors = {
  AINewsError,
  InvalidApiKeyError,
  RateLimitExceededError
}

export default { AINews, Errors };